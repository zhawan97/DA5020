library(tidyverse)
bedtype <- read.csv("bed_type.csv")
View(bedtype)
?read_csv
?read.csv
library(tidyverse)
bedtype <- read_csv("bed_type.csv")
library(tidyverse)
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("bussiness.csv")
library(tidyverse)
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
View(business_df)
library(tidyverse)
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
bedfact_df <- read_csv("bed_fact.csv")
View(bedfact_df)
View(bedtype_df)
library(tidyverse)
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
library(tidyverse)
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
print(bedtype_df)
print(business_df)
# Load libraries
library(tidyverse)
# read and print csv files
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
print(bedtype_df)
print(business_df)
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
# Read bed_fact.csv and print the dataframe
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
# Select the 3 fact columns and print them
factsonly_df <- bedfact_df %>%
select(license_beds,census_beds,staffed_beds)
print(factsonly_df)
?filter
bedfact_filtered <- bedfact_df %>%
filter(bed_id = 4)
bedfact_filtered <- bedfact_df %>%
filter(bed_id == 4)
View(bedfact_filtered)
bedfact_filtered <- bedfact_df %>%
filter(bed_id == 4 | bed_id == 15)
bedfact_filtered <- bedfact_df %>%
filter(bed_id == 4 | bed_id == 15) %>%
arrange(desc(license_beds))
bedfact_filtered <- bedfact_df %>%
filter(bed_id == 4 | bed_id == 15) %>%
arrange(desc(license_beds))
print(bedfact_filtered)
# Load libraries
library(RSQLite)
library(tidyverse)
# read and print csv files
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
print(bedtype_df)
print(business_df)
# Read bed_fact.csv and print the dataframe
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
# Select the 3 fact columns and print them
factsonly_df <- bedfact_df %>%
select(license_beds,census_beds,staffed_beds)
print(factsonly_df)
View(business_df)
View(bedfact_df)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id")
View(bed_business)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
#select(ims_org_id, business_name, bed_id,)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id")# %>%
#select(ims_org_id, business_name, bed_id,)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
# merge bedfact_df and business_df to get column business_name
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
# Top 10 by License Beds
license_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, license_beds)
head(sort(license_beds_df[,"license_beds"], decreasing = TRUE), n = 10)
?sort
?order
?order
# merge bedfact_df and business_df to get column business_name
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
# Top 10 by License Beds
license_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, license_beds)
head(license_beds_df[order(-license_beds_df$license_beds)],), n = 10)
# merge bedfact_df and business_df to get column business_name
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
# Top 10 by License Beds
license_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, license_beds)
head(license_beds_df[order(-license_beds_df$license_beds),], n = 10)
# Top 10 by Census beds
census_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, census_beds)
head(census_beds_df[order(-census_beds_df$census_beds),], n = 10)
# Top 10 by Staffed beds
staffed_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, staffed_beds)
head(staffed_beds_df[sort(-staffed_beds_df$staffed_beds),], n = 10)
# Top 10 by Staffed beds
staffed_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, staffed_beds)
head(staffed_beds_df[order(-staffed_beds_df$staffed_beds),], n = 10)
# Top 10 by License Beds
license_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, license_beds)
head(license_beds_df[order(-license_beds_df$license_beds),], n = 10)
bed_business %>%
filter(bed_id == 4| bed_id == 15) %>%
select(business_name, census_beds)
# Top 10 by Census beds
census_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, census_beds,license_beds)
head(census_beds_df[order(-census_beds_df$census_beds),], n = 10)
# Top 10 by Census beds
census_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, census_beds)
head(census_beds_df[order(-census_beds_df$census_beds),], n = 10)
dim(bed_business)
# Load libraries
library(RSQLite)
library(tidyverse)
# read and print csv files
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
print(bedtype_df)
print(business_df)
# Read bed_fact.csv and print the dataframe
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
# Select the 3 fact columns and print them
factsonly_df <- bedfact_df %>%
select(license_beds,census_beds,staffed_beds)
print(factsonly_df)
# merge bedfact_df and business_df to get column business_name
bed_business <- merge(bedfact_df, business_df, by = "ims_org_id") %>%
select(ims_org_id, business_name, bed_id, license_beds, census_beds, staffed_beds)
# Top 10 by License Beds
license_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, license_beds)
top_license_beds <- head(license_beds_df[order(-license_beds_df$license_beds),], n = 10)
top_license_beds
# Top 10 by Census beds
census_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, census_beds)
top_census_beds <- head(census_beds_df[order(-census_beds_df$census_beds),], n = 10)
top_census_beds
# Top 10 by Staffed beds
staffed_beds_df <- bed_business %>%
filter(bed_id == 4 | bed_id == 15) %>%
select(business_name, staffed_beds)
top_staffed_beds <- head(staffed_beds_df[order(-staffed_beds_df$staffed_beds),], n = 10)
top_staffed_beds
# Finding hospitals that are top 10 in license beds, census beds, and staffed beds
# Joining hospitals that are present in both top 10 license beds and census beds
common_license_census <- inner_join(top_license_beds, top_census_beds, by = join_by(business_name))
# Joining hospitals from joined dataframe above to top 10 staffed beds
common_hospitals <- inner_join(common_license_census, top_staffed_beds, by = join_by(business_name))
common_hospitals
# Hospitals that have ICU beds
icu_beds <- bed_business |>
filter(bed_id == 4) |>
select(business_name, bed_id, license_beds, census_beds, staffed_beds)
head(icu_beds)
# Hospitals that have SICU beds
sicu_beds <- bed_business |>
filter(bed_id == 15) |>
select(business_name, bed_id, license_beds, census_beds, staffed_beds)
head(sicu_beds)
# joining hospitals based on business_name which will show hospitals that have both ICU and SICU beds
icu_sicu_hospitals <- inner_join(icu_beds, sicu_beds, by = join_by(business_name)) |>
rename(bed_id_icu = bed_id.x, license_beds_icu = license_beds.x,
census_beds_icu = census_beds.x, staffed_beds_icu = staffed_beds.x,
bed_id_sicu = bed_id.y, license_beds_sicu = license_beds.y,
census_beds_sicu = census_beds.y, staffed_beds_sicu = staffed_beds.y)
# Displaying hospitals
head(icu_sicu_hospitals, n = 10)
# License beds that have both ICU and SICU
icu_sicu_hospitals |>
select(business_name, bed_id_icu, license_beds_icu,
bed_id_sicu, license_beds_sicu) |>
mutate(total_icu_sicu_license_beds = license_beds_icu + license_beds_sicu) |>
arrange(desc(total_icu_sicu_license_beds)) |>
relocate(total_icu_sicu_license_beds, .after = business_name) |>
head(n = 10)
# Census beds for ICU and SICU
icu_sicu_hospitals |>
select(business_name, bed_id_icu, census_beds_icu,
bed_id_sicu, census_beds_sicu) |>
mutate(total_icu_sicu_census_beds = census_beds_icu + census_beds_sicu) |>
arrange(desc(total_icu_sicu_census_beds)) |>
relocate(total_icu_sicu_census_beds, .after = business_name) |>
head(n = 10)
icu_sicu_hospitals |>
select(business_name, bed_id_icu, staffed_beds_icu,
bed_id_sicu, staffed_beds_sicu) |>
mutate(total_icu_sicu_staffed_beds = staffed_beds_icu + staffed_beds_sicu) |>
arrange(desc(total_icu_sicu_staffed_beds)) |>
relocate(total_icu_sicu_staffed_beds, .after = business_name) |>
head(n = 10)
?inner_join
library(DBI)
library(RSQLite)
library(readr)
?dbWriteTable
# Load libraries
library(RSQLite)
library(tidyverse)
# read and print csv files
bedtype_df <- read_csv("bed_type.csv")
business_df <- read_csv("business.csv")
head(bedtype_df)
head(business_df)
# Read bed_fact.csv and print the dataframe
bedfact_df <- read_csv("bed_fact.csv")
print(bedfact_df)
# Select the 3 fact columns and print them
factsonly_df <- bedfact_df %>%
select(license_beds,census_beds,staffed_beds)
print(factsonly_df)
library(DBI)
library(RSQLite)
library(readr)
# Load CSV files into data frames
business_df <- read_csv("business.csv", show_col_types = FALSE)
bed_type_df <- read_csv("bed_type.csv", show_col_types = FALSE)
bed_fact_df <- read_csv("bed_fact.csv", show_col_types = FALSE)
# Create an in-memory SQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
# Write the data frames to the database
dbWriteTable(con, "business", business_df)
dbWriteTable(con, "bed_type", bed_type_df)
dbWriteTable(con, "bed_fact", bed_fact_df)
print(licensed_beds)
print(census_beds)
print(staffed_beds)
total_beds <- Reduce(function(x, y) merge(x, y, by = "hospital_name", all = TRUE), list(licensed_beds, census_beds, staffed_beds))
total_beds$total_beds <- rowSums(total_beds[, c("total_license_beds", "total_census_beds", "total_staffed_beds")], na.rm = TRUE)
total_beds_ranked <- total_beds[order(-total_beds$total_beds), c("hospital_name", "total_beds")]
print(total_beds_ranked)
common_hospitals <- Reduce(intersect, list(licensed_beds$hospital_name, census_beds$hospital_name, staffed_beds$hospital_name))
print(common_hospitals)
score_hospital <- function(df) {
df$score <- 10:1
return(df[, c("hospital_name", "score")])
}
licensed_scores <- score_hospital(licensed_beds)
census_scores <- score_hospital(census_beds)
staffed_scores <- score_hospital(staffed_beds)
# Combine scores from all categories
combined_scores <- rbind(licensed_scores, census_scores, staffed_scores)
# Aggregate scores for each hospital
aggregate_scores <- aggregate(score ~ hospital_name, combined_scores, sum)
# Sort hospitals by total score
aggregate_scores <- aggregate_scores[order(-aggregate_scores$score), ]
# Print top hospitals by total score
print(aggregate_scores)
print(licensed_beds_both)
print(census_beds_both)
print(staffed_beds_both)
total_beds_both <- Reduce(function(x, y) merge(x, y, by = "hospital_name", all = TRUE), list(licensed_beds_both, census_beds_both, staffed_beds_both))
total_beds_both$total_beds <- rowSums(total_beds_both[, c("total_license_beds", "total_census_beds", "total_staffed_beds")], na.rm = TRUE)
total_beds_ranked_both <- total_beds_both[order(-total_beds_both$total_beds), c("hospital_name", "total_beds")]
print(total_beds_ranked_both)
common_hospitals_both <- Reduce(intersect, list(licensed_beds_both$hospital_name, census_beds_both$hospital_name, staffed_beds_both$hospital_name))
print(common_hospitals_both)
score_hospital <- function(df) {
df$score <- 10:1
return(df[, c("hospital_name", "score")])
}
licensed_scores_both <- score_hospital(licensed_beds_both)
census_scores_both <- score_hospital(census_beds_both)
staffed_scores_both <- score_hospital(staffed_beds_both)
# Combine scores from all categories
combined_scores_both <- rbind(licensed_scores_both, census_scores_both, staffed_scores_both)
# Aggregate scores for each hospital
aggregate_scores_both <- aggregate(score ~ hospital_name, combined_scores_both, sum)
# Sort hospitals by total score
aggregate_scores_both <- aggregate_scores_both[order(-aggregate_scores_both$score), ]
print(aggregate_scores_both)
?reduce
?intersect
