---
title: "Assignment 9"
author: "Zain Awan"
output:
  html_document:
    df_print: paged
---

# Question 1

After inspecting the data we can see that the downloaded data has a few extra columns than the one provided on the canvas site. I looked at the dat dictionary that was provided on the site and the columns did not appear there either, so I decided to remove them.
```{r message=FALSE, warning=FALSE}
# Load libraries
library(ggplot2)
library(RCurl)
library(tidyverse)
library(stringr)

# set url and destination file
url <- "https://data.sfgov.org/resource/rkru-6vcg.csv?$limit=35331"

traffic_df <- read.csv(url, stringsAsFactors = FALSE)

head(traffic_df)

# remove extra columns
traffic_df <- traffic_df %>%
  select(activity_period, operating_airline, operating_airline_iata_code, published_airline, published_airline_iata_code, geo_summary, geo_region, activity_type_code, price_category_code, terminal, boarding_area, passenger_count)

head(traffic_df)
```

# Question 2

The line graph below shows a yearly increase in flights in the month of March with the exception of March 2020 which saw a huge crash in the amount of passengers followed by a quick recovery over the next few years. The total passenegers in 2023 was still less than pre-pandemic levels.
```{r}
# filter dataframe for march only
march_df <- traffic_df %>%
  filter(str_extract(activity_period, "[0-9]{2}$") == "03")

# Calculate total passengers for each period
passenger_counts <- march_df %>% 
  group_by(activity_period) %>%
  summarize(total_passengers = sum(passenger_count))

# Visualize with line graph
ggplot(passenger_counts, aes(x=activity_period, y=total_passengers)) + geom_line() + geom_point() + labs(x = "Activity Period", y = "Total Passengers", title = "Total Passengers by Activity Period") + scale_y_log10()
```

# Question 3

From the calculations below we can see that SMA was calculated to be 4382334. This is lower than the actual value and has a percent error of 4.71%. This may seem close but the forecast was off by more than 200,000 passengers. This error is most likely due to the method we are using to forecast since the data has an upwards trend up until March 2020 and simple moving averages are not the best for this scenario.
```{r}
# Simple moving average. Get data from 2016 to 2018
periods <- c(as.numeric(passenger_counts[17,2]),as.numeric(passenger_counts[18,2]),as.numeric(passenger_counts[19,2]))
SMA <- mean(last3, trim = 0)
print(SMA)

# Calculate error
Mar2019 <- as.numeric(passenger_counts[20,2])
error <- abs(Mar2019-SMA)
percent_error <- error/Mar2019 * 100
print(percent_error)
```

# Question 4

This time we got our forecast to be 4,453,848 passengers which is still almost 150,000 passengers below the actual number with a percent error of 3.16%. This is better than the SMA but theres still room to improve. The error is introduced for the same reason as the SMA. We are averaging out an upward trend, therefore we are failing to take into acount the fact that the figures were lower before the year 2016.
```{r}
# Wighted moving average. Set weights to be 3, 5, and 7 for the years 2016, 2017, and 2018
weights <- c(3,5,7)
product <- weights * periods
WMA <- sum(product)/sum(weights)
print(WMA)
error <- abs(Mar2019-WMA)
percent_error <- error/Mar2019 * 100
print(percent_error)
```

# Question 5

The forecast from this model gives us a value of 4548729 for March 2019 which is just 50,000 passengers less than the actual figure. The percent error is 1.09%. This forecast is the most accurate so far because it takes into account all of the previous data in order to build the model.
```{r}
# Exponential Smoothing with alpha = 0.7 and data starting from 2008 to 2018
a <- 0.7
df <- passenger_counts %>%
  filter(activity_period > 200800 & activity_period < 202000)
df$activity_period <- as.numeric(df$activity_period)
df$total_passengers <- as.numeric(df$total_passengers)

# convert from tibble to regular dataframe. Tibble is incompatable with analysis below because new columns are created with class list
df <- as.data.frame(df)

# Initialize forecast and error columns
df$Ft <- 0
df$E <- 0
df$Ft[1] <- df[1,2]

# Loop through to build model
for (i in 2:nrow(df)) {
  df$Ft[i] <- as.numeric(df$Ft[i-1]) + as.numeric(a*df$E[i-1])
  df$E[i] <- abs(df[i,2] - df$Ft[i])
}

percent_error <- df$E[12]/df$total_passengers[12] * 100
print(percent_error)
```

# Question 6

The forecast for 2019 is 4,641,131 passengers and the forecast for 2020 is 4,809,331 passengers. The 2019 forecast has a really low error of 41942 or 0.91% while the forecast for 2020 is understandably off by several million passengers.
```{r}
# Simple Linear Regression from 2008 to 2018
df <- passenger_counts %>%
  filter(activity_period > 200800) %>%
  filter(activity_period < 201900)

model <- lm(df$total_passengers ~ df$activity_period)
print(model)
# y = -334959715 + 1682(activity_period)
forecast2019 <- -334959715 + (1682*201903)
forecst2020 <- -334959715 + (1682*202003)
print(forecast2019)
print(forecst2020)
```

# Question 7

The MSE for the exponential smoothing model from question 5 is 34,073,431,426.
The MSE for the simple linear regression model from question 6 is 16,229,989,655
The MSE is lower for the linear regression which means that it is a better model and will give more accurate forecasts.
```{r}
# Exponential Smoothing with alpha = 0.7 and data starting from 2008 to 2018
a <- 0.7
df <- passenger_counts %>%
  filter(activity_period > 200800 & activity_period < 201900)
df$activity_period <- as.numeric(df$activity_period)
df$total_passengers <- as.numeric(df$total_passengers)

# convert from tibble to regular dataframe. Tibble is incompatable with analysis below because new columns are created with class list
df <- as.data.frame(df)

# Initialize forecast and error columns
df$Ft <- 0
df$E <- 0
df$Ft[1] <- df[1,2]

# Loop through to build model
for (i in 2:nrow(df)) {
  df$Ft[i] <- as.numeric(df$Ft[i-1]) + as.numeric(a*df$E[i-1])
  df$E[i] <- abs(df[i,2] - df$Ft[i])
}

# Calculate MSE for exponential smoothing model
error_means <- mean(df$E)
MSE_1 <- (error_means)^2

# Simple Linear Regression from 2008 to 2018
df <- passenger_counts %>%
  filter(activity_period > 200800) %>%
  filter(activity_period < 201900)

model <- lm(df$total_passengers ~ df$activity_period)

# Calculate MSE for Simple Linear Regression model
MSE_2 <- mean((model$residuals)^2)
print(MSE_1)
print(MSE_2)
```

